---
title: "R基础学习-控制流、函数、pply族"
author: "林静"
date: "Sunday, November 20, 2016"
output: html_document
---

#控制流
    
    在正常情况下，R程序中的语句是从上至下顺序执行。但有时你可能希望重复执行某些语句，或仅在满足特定条件的情况下执行另外的语句。
    这时候呢，就是控制流结构发挥作用的地方了。
    控制流结构包括两个部分：条件、循环。
    statement:语句，一条或一组复合语句（包含在{}里的一组语句，使用分号隔开）
    cond:条件，最终被解析为真或假
    expr:是一条数值或字符串的求值语句
    seq:是一个数值或字符串序列

##条件执行

条件执行结构，一条或一组语句仅在满足一个指定条件时执行。条件执行结构包括：if-else、ifelse、switch。

###if-else结构

if (cond) statement
if (cond) statement1 else statement2

###ifelse结构

ifelse(cond,statement1,statement2)

###switch结构

switch(expr,……)类似开关
eg:switch("happy",happy="i am glad you are happy",afraid="there is nothing to fear",sad="cheer up",angry="calm down now")

##循环执行

###for结构

for结构重复地执行一个语句，直到某个变量的值不再包含在序列seq中为止。
for (variable in seq) statement
eg:for (i in 1:10) print("Hello")

###while结构

while结构重复地执行一个语句，直到条件不为真为止
while (cond) statement
eg:i<-10
   while (i>0) {print("Hello"),i=i-1}

#function

编写函数与调用函数

编写函数：

myfunction<-function(arg1,arg2=xx,……){
statements
return(object)
}

tips：1、函数中的对象只在函数内部使用
      2、使用一个表达式来捕获错误输入的参数值（类型不符）通常来说是一个好主意(warning()、message()、stop())
      3、return意味着函数将返回return(object)的形式
      4、arg2=xx，指的是默认情况下为xx类型

eg:输出指定的日期格式

```{r}
mydate<-function(type="long"){
switch(type,long=format(Sys.time(),"%A %B %d %Y"),short=format(Sys.time(),"%m-%d-%y"),cat(type,"is not a recognized type\n"))
}
mydate1<-function(type="long"){
switch(type,long=format(Sys.time(),"%A %B %d %Y"),short=format(Sys.time(),"%m-%d-%y"),warning("is not a recognized type"),call.=TRUE)
}
```

type="long",指的是默认情况下为long类型
cat()仅在输入的日期格式类型不匹配时执行，用来捕获错误输入的参数值

调用函数：

```{r}
mydate()
mydate("long")
mydate("short")
mydate("foolish")
mydate1("foolish")
```

##一个练习

给定一个N样本的数据，求样本均值与标准差,并输出

```{r}
mystats<-function(x){
center<-median(x)
spread<-sd(x) 
result<-list(center=center,spread=spread)
return(result)
}
x<-rnorm(100)
x
mystats(x)
```

#pply族

*R中利用pply族（apply、lapply、sapply、tapply）、by、aggregate等函数进行分组/分类统计
*pply簇相比与for循环在R中速度要快，并且能够有效的缩减代码量和使代码更加容易修改。

##apply

apply函数是对一个数组按行/列进行function计算，apply的返回值是一个向量
apply(X,MARGIN,FUN,……)

X为数据框类型
MARGIN为一个向量，1表示行，2表示列，c(1,2)表示行、列都计算
FUN即为function

```{r}
apply(mtcars[,c(1,3,4,5,6,7)],2,median)
```

##lapply、sapply

lapply函数是对一个list对象中的每个元素进行function计算,lapply的返回值是一个和X有相同长度的list
lapply(X,FUN,……)

X为list类型，R可自动转换
FUN即为function

sapply是lapply的一个特殊情形
sapply(X,FUN,……,simplify=TRUE/FALSE)

X为list类型，R可自动转换
FUN即为function
若simplify=FALSE,返回值也是list，则sapply等价于lapply
若simplify=TRUE,返回向量

##tapply

tapply函数是根据INDEX进行function计算
tapply(X,INDEX,FUN,simplify=TRUE/FALSE)

X通常是一个向量
INDEX是一个list,list中的每一个元素是与X有同样长度的因子
FUN即为function
若simplify=FALSE,返回值是list
若simplify=TRUE,返回向量

```{r}
tapply(mtcars$mpg,mtcars$cyl,mean)
```

利用tapply还可以实现类似于excel里的数据透视表的功能

```{r}
tapply(mtcars$mpg,list(mtcars$cyl,mtcars$gear),mean)
```

by结构也可以实现类似于tapply的效果，但结果不够美观
with(X,by(X,INDEX,FUN))

```{r}
with(mtcars,by(mtcars$mpg,mtcars$cyl,mean))
```

aggregate结构也可以实现类似于tapply的效果
aggregate(X,by=list(),FUN,simplify=TRUE)

```{r}
aggregate(mtcars$mpg,by=list(mtcars$cyl,mtcars$gear),mean)
```
